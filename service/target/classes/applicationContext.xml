<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置组件的扫描 com.tjetc 本包及其子孙包下的所有的在类上标注有
    @Controller,@Service,@Repository,@Component 注解的类,
    spring 会把标注了这些注解的类当做你配置 bean 节点一样纳入 spring 容器管理-->
    <context:component-scan base-package="com.tjetc.service"/>
    <!--记载属性文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          p:driverClassName="${driver}"
          p:url="${url}"
          p:username="${user}"
          p:password="${password}"/>
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:configLocation="classpath:mybatis.xml"
          p:dataSource-ref="dataSource"/>-->
    <!--配置事务过滤器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--配置 sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:configLocation="classpath:mybatis.xml"
          p:dataSource-ref="dataSource"/>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:sqlSessionFactoryBeanName="sqlSession"
          p:basePackage="com.tjetc.dao"/>
    <!--切点-->
    <aop:aspectj-autoproxy  proxy-target-class="true"/>
    <!--声明式事务，spring中只有运行时异常才会回滚-->
    <!--因为运行时异常抛出而导致的事务无法回滚解决办法
        1. 重新抛出运行时异常
        2. catch代码块中添加：TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();return false;-->
    <!--需要回滚的类，判断某个方法是否需要环绕当前切面逻辑的条件，即此方法是否需要被切片-->
    <!--<aop:config>
        //在使用spring框架配置AOP的时候，不管是通过XML配置文件还是注解的方式都需要定义pointcut"切入点"
        //例如定义切入点表达式 execution(* com.sample.service.impl..*.*(..))
        //execution()是最常用的切点函数，其语法如下所示:整个表达式可以分为五个部分：
        //1、execution(): 表达式主体。
        //2、第一个*号：表示返回类型，*号表示所有的类型。
        //3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。
        //4、第二个*号：表示类名，*号表示所有的类。
        //5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。
        //*返回任意类型 com.tjetc.service..*子包及子孙包下任意字符结尾的类 .*(..)任意方法(任意参数))
        <aop:pointcut id="transCut" expression="execution(* com.tjetc.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transCut"/>
    </aop:config>-->
    <!--需要回滚的方法，环绕的切面逻辑-->
    <!--<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:maxUploadSize="9999999999999999"
          p:defaultEncoding="UTF-8"/>
</beans>